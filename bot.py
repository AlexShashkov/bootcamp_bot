#!/usr/bin/python3.6
# -*- coding: utf-8 -*-

from vk_api import VkApi
from datetime import datetime
from vk_api.utils import get_random_id
#from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    def __init__(self, bot, db):
        super().__init__()
        self.bot = bot
        self.db = db

        self.MessageCommands = {
            "!–ø—Ä–∏–≤–µ—Ç" : self.sayHi,
            "!–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞" : self.showExampleKeyboard
        }

        self.PendingStats = {
            "REGISTER_NAME" : self.registerName,
            "REGISTER_CODE" : self.registerCode,
            "EDIT_NAME" : self.editName,
            "EDIT_CODE" : self.editCode
        }

    def checkCommand(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # NOTE: –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π, –°–∞—à–∞, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ö–µ—Ä–Ω—è
        request = event.object.body
        user_id = event.object.user_id

        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()

        if res != None:
            if request != None and request != "":
                if not self.checkPending(event):
                    if request in self.MessageCommands.keys():
                        self.MessageCommands[request](event)
                    else:
                        self.bot.writeMsg(event.object.user_id, f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–ø–∏—à–∏ !–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.")
            else:
                self.bot.writeMsg(event.object.user_id, f"–ö—Ä—É—Ç–æ, –∞ —á—Ç–æ —ç—Ç–æ?")
        else:
            #self.bot.sendKeyboard(user_id, "main_login_keyboard", """–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üêâ""")
            self.bot.sendKeyboard(user_id, "main_keyboard", """–ü—Ä–∏–≤–µ—Ç üêâ""")
            self.db.insert("Students", "user_id, current_keyboard", f"'{user_id}', 'main_login_keyboard'")
            self.db.connection.commit()

    def checkPending(self, event):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.db.select("Pending", "act", f"WHERE user_id='{event.object.user_id}'")
        res = self.db.cursor.fetchone()
        print("Checking pending:", res)
        #–ø—Ä–æ—Å—Ç–∏ –≥–æ—Å–ø–æ–¥–∏
        if res != None:
            res = res[0]
        #
        if res != None:
            if res in self.PendingStats:
                self.PendingStats[res](event)
            else:
                self.bot.writeMsg(event.object.user_id, f"–û—à–∏–±–∫–∞: {event.object.body} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã")
            return True
        else:
            return False

    ####    –ö–û–ú–ê–ù–î–´    ####

    def sayHi(self, event):
        self.bot.writeMsg(event.object.user_id, "–ø—Ä–∏–≤–µ—Ç!!!")

    def showSimilar(self, event):
        self.bot.writeMsg(event.object.user_id, "–ü–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã:")

    def showExampleKeyboard(self, event):
        user_id = event.object.user_id
        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        self.bot.sendKeyboard(user_id, "main_keyboard", """–î–µ—Ä–∂–∏ üêâ""", True)

    ####    –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø    ####

    def registerName(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è
        self.db.update("Students", "full_name", f"'{event.object.body}'", f"WHERE user_id = '{event.object.user_id}'")
        self.db.update("Pending", "act", "'REGISTER_CODE'", f"WHERE user_id = '{event.object.user_id}'")
        self.db.connection.commit()
        self.bot.writeMsg(event.object.user_id, "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. üêâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —à–∏—Ñ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã")

    def registerCode(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–¥
        self.db.update("Students", "code", f"'{event.object.body}'", f"WHERE user_id = '{event.object.user_id}'")
        self.db.update("Pending", "act", "NULL", f"WHERE user_id = '{event.object.user_id}'")
        self.db.connection.commit()
        self.bot.sendKeyboard(event.object.user_id, "main_keyboard", "–Ø –∑–∞–ø–æ–º–Ω–∏–ª üêâ", True)

    ####    –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï    ####
    def editName(self, event):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–º—è
        user_id = event.object.user_id
        self.db.update("Students", "full_name", f"'{event.object.body}'", f"WHERE user_id = '{user_id}'")
        self.db.update("Pending", "act", "NULL", f"WHERE user_id = '{user_id}'")
        self.db.connection.commit()
        self.bot.sendKeyboard(user_id, "main_info_edit_keyboard", "–ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

    def editCode(self, event):
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–æ–¥
        user_id = event.object.user_id
        self.db.update("Students", "code", f"'{event.object.body}'", f"WHERE user_id = '{user_id}'")
        self.db.update("Pending", "act", "NULL", f"WHERE user_id = '{user_id}'")
        self.db.connection.commit()
        self.bot.sendKeyboard(user_id, "main_info_edit_keyboard", "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


class ButtonHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    def __init__(self, bot, db):
        super().__init__()
        self.ButtonCommands = {
            #   –ö–Ω–æ–ø–∫–∏-—Å–æ–æ–±—â–µ–Ω–∏—è
            "info_edit_call":    self.infoEditCall,
            "cancel_call":       self.cancellCall
        }

        self.bot = bot
        self.db = db

    #
    #   –ö–Ω–æ–ø–∫–∏-—Å–æ–æ–±—â–µ–Ω–∏—è
    #

    def infoEditCall(self, event):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user_id = event.object.user_id
        #self.bot.sendKeyboard(user_id, "main_info_edit_keyboard", "–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", True)
        self.bot.sendKeyboard(user_id, "main_keyboard", "Uh uh uh! You didn't say the magic word!", True)

    def cancellCall(self, event):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"""
        user_id = event.object.user_id
        self.db.update("Pending", "act", "NULL", f"WHERE user_id = '{user_id}'")
        self.db.connection.commit()
        # keyboard = event.object.payload.get('keyboard')
        self.bot.sendKeyboard(user_id, "main_keyboard", "–û—Ç–º–µ–Ω—è–µ–º –≤–≤–æ–¥", True)
        #self.bot.sendKeyboard(user_id, self.getCurrentKeyboard(user_id), "–û—Ç–º–µ–Ω—è–µ–º –≤–≤–æ–¥")

    #
    #   –û–±—Ä–∞–±–æ—Ç—á–∏–∫
    #

    def checkCommand(self, event):
        user_id = event.object.user_id
        call = event.object.payload.type
        exception = None
        if hasattr(event.object.payload, 'exception'):
            exception = event.object.payload.exception
        keyboard = event.object.payload.keyboard

        def runEvent():
            if keyboard == None:
                self.bot.writeMsg(event.object.user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û—à–∏–±–∫–∞: —ç–≤–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
            elif keyboard == "oneline":
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
                self.ButtonCommands[call](event)
            elif self.bot.keyboards[keyboard].checkCommand(event):
                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                pass
            else:
                # –¢–∞–∫–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –Ω–µ—Ç
                self.bot.writeMsg(event.object.user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û—à–∏–±–∫–∞: —ç–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print(f"FATAL - {call}")

        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()

        if res == None:
            self.db.insert("Students", "user_id, current_keyboard", f"'{user_id}', 'main_login_keyboard'")
            self.db.connection.commit()

        if not self.checkPending(user_id):
            runEvent()
        elif exception != None:
            runEvent()
        else:
            self.bot.writeMsg(user_id, "–û—Ç –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")

    def checkPending(self, user_id):
        self.db.select("Pending", "act", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        if res == None:
            return False
        elif res[0] != None:
            return True
        else: return False

    def getCurrentKeyboard(self, user_id):
        keyboard = None
        self.db.select("Students", "current_keyboard", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        if res != None:
            keyboard = res[0]

        return keyboard

class Bot:
    """–ë–æ—Ç"""
    def __init__(self, token, id, db):
        super().__init__()
        self.token = token
        self.id = id
        self.db = db

        self.session = VkApi(token=token, api_version="5.124")
        self.vk = self.session.get_api()
        #self.longpoll = VkBotLongPoll(self.session, group_id=id)

        self.keyboards = None

    def setKeyboards(self, keyboards):
        self.keyboards = keyboards

    def newUser(self, event):
        self.sendKeyboard(event.object.user_id, "main_login_keyboard", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")

    def userExit(self, event):
        #print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.object.user_id} –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.")
        pass

    def writeMsg(self, user_id, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.session.method('messages.send', {'user_id': user_id, 'message': message, "random_id":get_random_id()})

    def attachmentMsg(self, user_id, attachment_type, attachment_id):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        ownid = f"-{self.id}"
        self.session.method('messages.send', {'user_id': user_id, "random_id":get_random_id(), "attachment":f"{attachment_type}{ownid}_{attachment_id}"})

    def repostPost(self, user_id, id):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø–∏—Å—å"""
        self.attachmentMsg(user_id, "wall", id)

    def setCurrentKeyboard(self, id, keyboard):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–¥"""
        self.db.update("Students", "current_keyboard", f"'{keyboard}'", f"WHERE user_id='{id}'")
        self.db.connection.commit()

    def sendKeyboard(self, from_id, keyboard, text="", set_as_current=False, static=False):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        if keyboard in self.keyboards:
            if text == "": text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            if set_as_current:
                self.setCurrentKeyboard(from_id, keyboard)
            if static:
                keyboard=self.keyboards[keyboard].build(from_id)
                keyboard = keyboard.get_keyboard()
            else:
                keyboard = self.keyboards[keyboard].keyboard.get_keyboard()
            self.vk.messages.send(
                user_id=from_id,
                random_id=get_random_id(),
                peer_id=from_id,
                keyboard=keyboard,
                message=text
            )
