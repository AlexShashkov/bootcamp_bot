# –ü–æ—Ç–æ–º—É —á—Ç–æ –ø–∏—Ç–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∫–æ–ø–∏—Ä—É–µ—Ç, –∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –æ–±—ä–µ–∫—Ç, –º–¥–∞
from copy import deepcopy

from vk_api.keyboard import VkKeyboard, VkKeyboardColor

#
# –ì–ª–∞–≤–Ω—ã–µ –±–ª–æ–∫–∏
#

class KeyBoard:
    def __init__(self, bot, db):
        self.keyboard = None
        self.self_building = False
        self.calls = {}
        self.bot = bot
        self.db = db

    def checkCommand(self, event):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–≤–æ–µ–º —Å–ø–∏—Å–∫–µ"""
        call = event.obj.payload.get('type')
        if call in self.calls:
            self.calls[call](event)
            return True
        else:
            return False


class KeyboardMessage(KeyBoard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        settings = dict(one_time=False, inline=True)
        self.keyboard = VkKeyboard(**settings)


class KeyboardMain(KeyBoard):
    """–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        settings = dict(one_time=False, inline=False)
        self.keyboard = VkKeyboard(**settings)

#
#  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# 


class KeyboardMainMenu(KeyboardMain):
    """–ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.calls = {
            "info_call" : self.infoCall,
            "notes_call" : self.notesCall,
            "game_call" : self.gameCall,
            "tags_call" : self.tagsCall,
            "exit_call" : self.exitCall
        }
        self.name = "main_keyboard"

        self.keyboard.add_callback_button(label='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', color=VkKeyboardColor.POSITIVE, payload={"type": "info_call", "keyboard": self.name})       #payload={"type": "show_snackbar", "text": "–¢—ã –ª–æ—Ö"})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–ú–æ–∏ –∑–∞–ø–∏—Å–∏', color=VkKeyboardColor.PRIMARY, payload={"type": "notes_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–ú–∏–Ω–∏ –∏–≥—Ä–∞', color=VkKeyboardColor.PRIMARY, payload={"type": "game_call", "keyboard": self.name})
        self.keyboard.add_line()
        # self.keyboard.add_callback_button(label='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', payload={"type": 'tags_call', "keyboard": self.name})
        # self.keyboard.add_line()
        self.keyboard.add_openlink_button('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', 'https://vk.com/testbotmemrea?w=app5748831_-199323686')
        #self.keyboard.add_line()
        #self.keyboard.add_callback_button(label='–í—ã—Ö–æ–¥', color=VkKeyboardColor.NEGATIVE, payload={"type": "exit_call", "keyboard": self.name})

    def infoCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = event.obj.user_id
        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}'")
        res1 = self.db.cursor.fetchone()
        self.db.select("Students", "full_name", f"WHERE user_id='{user_id}'")
        res2 = self.db.cursor.fetchone()
        self.db.select("Students", "code", f"WHERE user_id='{user_id}'")
        res3 = self.db.cursor.fetchone()

        if res1 != None and res2 != None and res3 != None:
            text = f"""
id = {res1[0]}
–ò–º—è - {res2[0]}
–ì—Ä—É–ø–ø–∞ - {res3[0]}
"""
        self.bot.sendKeyboard(user_id, "inforamtion_edit_keyboard", text)
        self.bot.sendKeyboard(user_id, self.name)

    def notesCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, self.name, "–¢—É—Ç —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ –∑–∞–ø–∏—Å–∏ ü§îü§îü§î")

    def gameCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –∏–≥—Ä—ã"""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game_start", "–ó–∞–ø—É—Å–∫–∞—é –∏–≥—Ä—É", True)

    def tagsCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        """–£—Å—Ç–∞—Ä–µ–ª–æ. –ù–∞–ø—Ä–∞–≤–ª—è–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_tags_keyboard", "–û—Ç–∫—Ä—ã–≤–∞—é –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏", True, True)

    def exitCall(self, event):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.bot.sendKeyboard(event.obj.user_id, "main_login_keyboard", "–£–¥–∞—á–∏! üêâ", True)



#
#   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
#   –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∞–º–æ—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è - —ç—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∫–ª–∞—Å—Å
#


class KeyboardMainTagsManager(KeyboardMain):
    """–ù—É —Ç–∏–ø–∞ –º–∏–Ω–∏–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫—Ä—É—á–µ, –ø–æ—ç—Ç–æ–º—É —è –≤—Å–µ —ç—Ç–æ –∑—Ä—è –¥–µ–ª–∞–ª, –∫–æ–Ω–µ—á–Ω–æ!"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.self_building = True
        self.name = "main_tags_keyboard"

        self.calls = {
            "sub_call" : self.subCall,
            "unsub_call" : self.unSubCall,
            "back_call" : self.backCall
        }

        self.db.select("Tags")
        self.tags = list(map(lambda x: x[0], self.db.cursor.fetchall()))

    def build(self, user_id):
        """–°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
        keyboard = deepcopy(self.keyboard)
        self.db.select("Subscribes", "tag_id", f"WHERE user_id='{user_id}'")
        sub_tags = list(map(lambda x: x[0], self.db.cursor.fetchall()))

        for tag in self.tags:
            if tag not in sub_tags:
                keyboard.add_callback_button(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tag}",
                color=VkKeyboardColor.POSITIVE, payload={"type": "sub_call", "tag": f"{tag}", "keyboard": self.name})
                keyboard.add_line()

        for tag in sub_tags:
            keyboard.add_callback_button(label=f"–û—Ç–ø–∏—Å–∫–∞ –æ—Ç {tag}",
             color=VkKeyboardColor.PRIMARY, payload={"type": "unsub_call", "tag": f"{tag}", "keyboard": self.name})
            keyboard.add_line()

        keyboard.add_callback_button(label=f"–í –º–µ–Ω—é",
                color=VkKeyboardColor.NEGATIVE, payload={"type": "back_call", "keyboard": self.name})

        return keyboard

    def subCall(self, event):
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—ç–≥"""
        user_id = event.obj.user_id
        tag = event.obj.payload.get('tag')
        message = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {tag}"

        self.db.select("Subscribes", "tag_id", f"WHERE user_id='{user_id}'")
        sub_tags = list(map(lambda x: x[0], self.db.cursor.fetchall()))

        if tag not in sub_tags:
            self.db.insert("Subscribes", "user_id, tag_id", f"'{user_id}', '{tag}'")
            self.db.connection.commit()
        else:
            # –ê –≤–¥—Ä—É–≥ –±–∞–≥
            message = f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {tag}"

        self.bot.sendKeyboard(user_id, "main_tags_keyboard", message, True, True)

    def unSubCall(self, event):
        """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç—ç–≥–∞"""
        user_id = event.obj.user_id
        tag = event.obj.payload.get('tag')
        message = f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {tag}"

        self.db.select("Subscribes", "tag_id", f"WHERE user_id='{user_id}'")
        sub_tags = list(map(lambda x: x[0], self.db.cursor.fetchall()))

        if tag in sub_tags:
            self.db.delete("Subscribes", f"user_id='{user_id}' AND tag_id='{tag}'")
            self.db.connection.commit()
        else:
            # –ê –≤–¥—Ä—É–≥ –±–∞–≥
            message = f"–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {tag}"

        
        self.bot.sendKeyboard(user_id, "main_tags_keyboard", message, True, True)

    def backCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_keyboard", "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", True)


#
#   –ò–≥—Ä–∞
#

class GameKeyboardMenu(KeyboardMain):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã"""
    def __init__(self, bot, db, game):
        super().__init__(bot, db)

        self.calls = {
            "new_call" : self.newGameCall,
            "continue_call" : self.continueCall,
            "back_call" : self.backCall
        }

        self.game  = game
        self.name = "main_game_start"
        self.keyboard.add_callback_button(label='–ù–æ–≤–∞—è –∏–≥—Ä–∞', color=VkKeyboardColor.POSITIVE, payload={"type" : "new_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É', color=VkKeyboardColor.PRIMARY, payload={"type": "continue_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–í –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE, payload={"type": "back_call", "keyboard": self.name})

    def newGameCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–ù–∞—á–∏–Ω–∞—é –∏–≥—Ä—É", True)
        self.game.gameManager(user_id, "newgame")

    def continueCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã"""
        user_id = event.obj.user_id
        self.db.select("GameMaze", "m_coords", f"WHERE user_id='{user_id}'")
        if self.db.cursor.fetchone() != None:
            self.bot.sendKeyboard(user_id, "main_game", "–ü—Ä–æ–¥–æ–ª–∂–∞—é –∏–≥—Ä—É", True)
        else:
            self.bot.sendKeyboard(user_id, "main_game_start", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", True)

    def backCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_keyboard", "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", True)


class GameKeyboard(KeyboardMain):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–≥—Ä—ã"""
    def __init__(self, bot, db, game):
        super().__init__(bot, db)

        self.calls = {
            "forward_call" : self.forwardCall,
            "left_call" : self.leftCall,
            "right_call" : self.rightCall,
            "stay_call" : self.stayCall,
            "back_call" : self.backCall,
            "menu_call" : self.menuCall
        }

        self.game  = game
        self.name = "main_game"
        self.keyboard.add_callback_button(label='–í–≤–µ—Ä—Ö', color=VkKeyboardColor.POSITIVE, payload={"type" : "forward_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–ù–∞–ª–µ–≤–æ', color=VkKeyboardColor.PRIMARY, payload={"type": "left_call", "keyboard": self.name})
        self.keyboard.add_callback_button(label='–ù–∞–ø—Ä–∞–≤–æ', color=VkKeyboardColor.PRIMARY, payload={"type": "right_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–í–Ω–∏–∑', color=VkKeyboardColor.POSITIVE, payload={"type": "back_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–ü—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è', color=VkKeyboardColor.PRIMARY, payload={"type": "stay_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–í –º–µ–Ω—é', color=VkKeyboardColor.NEGATIVE, payload={"type": "menu_call", "keyboard": self.name})

    def forwardCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–ò–¥–µ–º –≤–≤–µ—Ä—Ö")
        self.game.gameManager(user_id, "move", "up")

    def leftCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–ò–¥–µ–º –Ω–∞–ª–µ–≤–æ")
        self.game.gameManager(user_id, "move", "left")

    def rightCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–ò–¥–µ–º –Ω–∞–ø—Ä–∞–≤–æ")
        self.game.gameManager(user_id, "move", "right")

    def stayCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ")
        self.game.gameManager(user_id, "stay")

    def backCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game", "–ò–¥–µ–º –≤–Ω–∏–∑")
        self.game.gameManager(user_id, "move", "down")

    def menuCall(self, event):
        user_id = event.obj.user_id
        self.bot.sendKeyboard(user_id, "main_game_start", "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", True)

#
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
#

class KeyboardLogin(KeyboardMain):
    """–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.name = "main_login_keyboard"
        self.calls = {
            "login_call" : self.loginCall,
        }
        self.keyboard.add_callback_button(label='–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', color=VkKeyboardColor.POSITIVE, payload={"type": "login_call", "keyboard": self.name})

    def loginCall(self, event):
        """–°–æ–±—ã—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # NOTE: –õ—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ MINI APPS
        user_id = event.obj.user_id
        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}' AND full_name IS NOT NULL")
        res = self.db.cursor.fetchone()
        if res == None:
            self.bot.writeMsg(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
            self.db.insert("Pending", "user_id, act", f"'{user_id}', 'REGISTER_NAME'")
            self.db.connection.commit()
        else:
            self.bot.sendKeyboard(user_id, "main_keyboard", "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!", True)


#
#   –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
#


class KeyboardMainEditProfile(KeyboardMain):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.name = "main_info_edit_keyboard"
        self.calls = {
            "info_edit_name_call" : self.editNameCall,
            "info_edit_group_call" : self.editGroupCall,
            "to_menu_call" : self.toMenuCall
        }
        self.keyboard.add_callback_button(label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', color=VkKeyboardColor.PRIMARY , payload={"type": "info_edit_name_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É', color=VkKeyboardColor.PRIMARY , payload={"type": "info_edit_group_call", "keyboard": self.name})
        self.keyboard.add_line()
        self.keyboard.add_callback_button(label='–í –º–µ–Ω—é', color=VkKeyboardColor.PRIMARY , payload={"type": "to_menu_call", "keyboard": self.name})

    def editNameCall(self, event):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.bot.sendKeyboard(event.obj.user_id, "cancel_keyboard", "–í–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
        self.db.update("Pending", "act", "'EDIT_NAME'", f"WHERE user_id = '{event.obj.user_id}'")
        self.db.connection.commit()

    def editGroupCall(self, event):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.bot.sendKeyboard(event.obj.user_id, "cancel_keyboard", "–í–≤–µ–¥–∏ —à–∏—Ñ—Ä –≥—Ä—É–ø–ø—ã")
        self.db.update("Pending", "act", "'EDIT_CODE'", f"WHERE user_id = '{event.obj.user_id}'")
        self.db.connection.commit()

    def toMenuCall(self, event):
        self.bot.sendKeyboard(event.obj.user_id, "main_keyboard", "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é", True)



#
# –ü–æ–±–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# NOTE: –¢–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ì–õ–ê–í–ù–£–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ 
# ButtonHandler. –õ–∏–±–æ –º–æ–∂–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å,
# –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å payload —Ç—É–¥–∞
#


class KeyboardEditProfile(KeyboardMessage):
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.keyboard.add_callback_button(label='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üìù', color=VkKeyboardColor.PRIMARY, payload={"type": "info_edit_call", "keyboard": "oneline"})

class CancelLastInput(KeyboardMessage):
    def __init__(self, bot, db):
        super().__init__(bot, db)
        self.keyboard.add_callback_button(label='–û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.NEGATIVE, payload={"type": "cancel_call", "exception": "1", "keyboard": "oneline"})