#   TODO: –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–ª–∞—Å—Å—É –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –µ–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫ –±–¥
#   self.setCurrentKeyboard(event, keyboard) –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ

from vk_api import VkApi
from datetime import datetime
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    def __init__(self, bot, db):
        super().__init__()
        self.bot = bot
        self.db = db

        self.MessageCommands = {
            "!–ø—Ä–∏–≤–µ—Ç" : self.sayHi,
            "!–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞" : self.showExampleKeyboard
        }

        self.PendingStats = {
            "REGISTER_NAME" : self.registerName,
            "REGISTER_CODE" : self.registerCode
        }

    def checkCommand(self, event):
        request = event.obj.message['text']
        user_id = event.obj.message['from_id']
        print (f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {user_id}: {request}")
        print(self.MessageCommands)
        if request in self.MessageCommands: 
            print("–∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω")
            self.MessageCommands[request](event)
        elif "!" == request[0]:
            self.showSimilar(event)
        else:
            self.checkPending(event)

    def setCurrentKeyboard(self, event, keyboard):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–¥"""
        user_id = event.obj.message['from_id']
        self.db.update("Students", "current_keyboard", f"'{keyboard}'", f"WHERE user_id='{user_id}'")
        self.db.connection.commit()

    def checkPending(self, event):
        self.db.select("Pending", "act", f"WHERE user_id='{event.obj.message['from_id']}'")
        res = self.db.cursor.fetchone()
        print(res)
        if res != None:
            res = res[0]
            if res in self.PendingStats:
                print("Pending –µ—Å—Ç—å —É —é–∑–µ—Ä–∞")
                self.PendingStats[res](event)

    ###

    def sayHi(self, event):
        self.bot.writeMsg(event.obj.message['from_id'], "–ø—Ä–∏–≤–µ—Ç!!!")

    def showSimilar(self, event):
        self.bot.writeMsg(event.obj.message['from_id'], "–ü–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã:")

    def showExampleKeyboard(self, event):
        print("–ü–æ–∏—Å–∫ –≤ –ë–î")
        user_id = event.obj.message['from_id']
        self.db.select("Students", "user_id", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        print("–ü–æ–∏—Å–∫ –∑–∞–∫–æ–Ω—á–µ–Ω")
        if res == None:
            print("—é–∑–µ—Ä –Ω–µ –≤–æ—à–µ–ª")
            self.bot.sendKeyboard(user_id, "main_login_keyboard", """–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É–µ—Ç –≤–æ–π—Ç–∏ üêâ""")
            self.db.insert("Students", "user_id, current_keyboard", f"'{user_id}', 'main_login_keyboard'")
            self.db.connection.commit()
        else:
            print("—é–∑–µ—Ä –Ω–∞–π–¥–µ–Ω")
            self.bot.sendKeyboard(user_id, "main_sub_keyboard", """–î–µ—Ä–∂–∏ üêâ""")
            self.setCurrentKeyboard(event, "main_sub_keyboard")

    #### –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ####

    def registerName(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è
        self.db.update("Students", "full_name", f"'{event.obj.message['text']}'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.update("Pending", "act", "'REGISTER_CODE'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.connection.commit()
        self.bot.writeMsg(event.obj.message['from_id'], "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. üêâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —à–∏—Ñ—Ä —Å–≤–æ–µ –≥—Ä—É–ø–ø—ã")

    def registerCode(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–¥
        self.db.update("Students", "code", f"'{event.obj.message['text']}'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.update("Pending", "act", "NULL", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.connection.commit()
        self.bot.sendKeyboard(event.obj.message['from_id'], "main_sub_keyboard", "–Ø –∑–∞–ø–æ–º–Ω–∏–ª üêâ")
        self.setCurrentKeyboard(event, "main_sub_keyboard")

    ####


class ButtonHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    def __init__(self, bot, db):
        super().__init__()
        self.ButtonCommands = {
            #   –ö–Ω–æ–ø–∫–∏-—Å–æ–æ–±—â–µ–Ω–∏—è
            "info_edit_call":    self.infoEditCall
        }

        self.bot = bot
        self.db = db

    #
    #   –ö–Ω–æ–ø–∫–∏-—Å–æ–æ–±—â–µ–Ω–∏—è
    #

    def infoEditCall(self, event):
        self.bot.writeMsg(event.obj.user_id, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
        self.db.update("Pending", "act", "'REGISTER_NAME'", f"WHERE user_id = '{event.obj.user_id}'")
        self.db.connection.commit()

    #
    #   –û–±—Ä–∞–±–æ—Ç—á–∏–∫
    #

    def checkCommand(self, event):
        print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞")
        user_id = event.obj.user_id
        call = event.obj.payload.get('type')
        keyboard = self.getCurrentKeyboard(user_id)

        if not self.checkPending(user_id):
            if keyboard == None:
                self.bot.writeMsg(event.obj.user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û—à–∏–±–∫–∞: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –±–¥") 
            elif self.bot.keyboards[keyboard].checkCommand(event):
                # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                #self.refresh(user_id, keyboard)
                pass
            elif call in self.ButtonCommands:
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
                self.ButtonCommands[call](event)
            else:
                # –¢–∞–∫–æ–≥–æ —ç–≤–µ–Ω—Ç–∞ –Ω–µ—Ç
                self.bot.writeMsg(event.obj.user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û—à–∏–±–∫–∞: —ç–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω") 
        else:
            self.bot.writeMsg(user_id, "–û—Ç –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö.")

    def checkPending(self, user_id):
        self.db.select("Pending", "act", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        if res == None:
            return False
        elif res[0] != None:
            print(res)
            return True
        else: return False

    def setCurrentKeyboard(self, event, keyboard):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–¥"""
        user_id = event.obj.user_id
        self.db.update("Students", "current_keyboard", f"'{keyboard}'", f"WHERE user_id='{user_id}'")
        self.db.connection.commit()

    def getCurrentKeyboard(self, user_id):
        keyboard = None
        self.db.select("Students", "current_keyboard", f"WHERE user_id='{user_id}'")
        res = self.db.cursor.fetchone()
        if res != None:
            keyboard = res[0]

        return keyboard

    def refresh(self, user_id, keyboard):
        self.bot.sendKeyboard(user_id, keyboard)

class Bot:
    """–ë–æ—Ç"""
    def __init__(self, token, id):
        super().__init__()
        self.token = token
        self.id = id

        self.session = VkApi(token=token, api_version="5.124")
        self.vk = self.session.get_api()
        self.longpoll = VkBotLongPoll(self.session, group_id=id)

        self.keyboards = None

    def setKeyboards(self, keyboards):
        self.keyboards = keyboards

    def newUser(self, event):
        self.sendKeyboard(event.obj.user_id, "login_keyboard", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")

    def userExit(self, event):
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.obj.user_id} –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def writeMsg(self, user_id, message):
        self.session.method('messages.send', {'user_id': user_id, 'message': message, "random_id":get_random_id()})

    def attachmentMsg(self, user_id, attachment_type, attachment_id):
        ownid = "-199323686"
        self.session.method('messages.send', {'user_id': user_id, "random_id":get_random_id(), "attachment":f"{attachment_type}{ownid}_{attachment_id}"})

    def sendKeyboard(self, from_id, keyboard, text=""):
        if keyboard in self.keyboards:
            if text != "":
                self.vk.messages.send(
                            user_id=from_id,
                            random_id=get_random_id(),
                            peer_id=from_id,
                            keyboard=self.keyboards[keyboard].keyboard.get_keyboard(),
                            message=text
                            )
            else:
                self.vk.messages.send(
                            user_id=from_id,
                            random_id=get_random_id(),
                            peer_id=from_id,
                            keyboard=self.keyboards[keyboard].keyboard.get_keyboard(),
                            # –î–£–†–û–í –ü–û–ß–ï–ú–£ –ù–ï–õ–¨–ó–Ø –û–¢–ü–†–ê–í–ò–¢–¨ –ö–õ–ê–í–ò–ê–¢–£–†–£ –ë–ï–ó –¢–ï–ö–°–¢–ê
                            # –ò –í–ï–†–ù–ò –°–¢–ï–ù–£
                            message="–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                            )
