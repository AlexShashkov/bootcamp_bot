from vk_api import VkApi
from datetime import datetime
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

from keyboards import *


class MessageHandler:
    def __init__(self, bot, db):
        super().__init__()
        self.bot = bot
        self.db = db

        self.MessageCommands = {
            "!–ø—Ä–∏–≤–µ—Ç" : self.sayHi,
            "!–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞" : self.showExampleKeyboard
        }

        self.PendingStats = {
            "REGISTER_NAME" : self.registerName,
            "REGISTER_CODE" : self.registerCode
        }

    def checkCommand(self, event):
        request = event.obj.message['text']
        user_id = event.obj.message['from_id']
        print (f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {user_id}: {request}")
        print(self.MessageCommands)
        if request in self.MessageCommands: 
            print("–∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω")
            self.MessageCommands[request](event)
        elif "!" == request[0]:
            self.showSimilar(event)
        else:
            self.checkPending(event)

    def sayHi(self, event):
        self.bot.writeMsg(event.obj.message['from_id'], "–ø—Ä–∏–≤–µ—Ç!!!")

    def showSimilar(self, event):
        self.bot.writeMsg(event.obj.message['from_id'], "–ü–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã:")

    def showExampleKeyboard(self, event):
        self.db.select("Students", "user_id", f"WHERE user_id='{event.obj.message['from_id']}'")
        res = self.db.cursor.fetchone()
        if res == None:
            self.bot.sendKeyboard(event.obj.message['from_id'], """–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É–µ—Ç –≤–æ–π—Ç–∏ üêâ""", "login_keyboard")
        else:
            self.bot.sendKeyboard(event.obj.message['from_id'], """–î–µ—Ä–∂–∏ üêâ""", "main_sub_keyboard")

    def checkPending(self, event):
        self.db.select("Pending", "act", f"WHERE user_id='{event.obj.message['from_id']}'")
        res = self.db.cursor.fetchone()
        print(res)
        if res != None:
            res = res[0]
            if res in self.PendingStats:
                print("Pending –µ—Å—Ç—å —É —é–∑–µ—Ä–∞")
                self.PendingStats[res](event)

    #### –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ####

    def registerName(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è
        self.db.update("Students", "full_name", f"'{event.obj.message['text']}'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.update("Pending", "act", "'REGISTER_CODE'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.connection.commit()
        self.bot.writeMsg(event.obj.message['from_id'], "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. üêâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –®–ò–§–†-–ß–ò–°–õ–û-–ß–ò–°–õ–û")

    def registerCode(self, event):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–¥
        self.db.update("Students", "code", f"'{event.obj.message['text']}'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.update("Pending", "act", "'NONE'", f"WHERE user_id = '{event.obj.message['from_id']}'")
        self.db.connection.commit()
        self.bot.sendKeyboard(event.obj.message['from_id'], "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ï—â–µ —Ä–∞–∑ üêâ", "main_sub_keyboard")
        self.bot.writeMsg(event.obj.message['from_id'], 
"""
–ü–æ–º–∏–º–æ –º–µ–Ω—é –±–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥. –ü–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Å—Ç–∞–≤–∏—Ç—Å—è –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫:
!—Å–±—Ä–æ—Å - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
!–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –≤—ã–∑–æ–≤ –º–µ–Ω—é
"""
        )

    ####


class ButtonHandler:
    def __init__(self, bot, db):
        #TODO: –ü—Ä–∏–≤—è–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∞ –Ω–µ –∫ –æ–¥–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        super().__init__()
        self.ButtonCommands = {
            "login_call":               self.loginCall,
            "information_call":         self.infoCall,
            "information_edit_call":    self.infoEditCall,
            "sub_call":                 self.subCall,
            "unsub_call":               self.unSubCall,
            "notes_call":               lambda x: self.bot.writeMsg(x.obj.user_id, "–¢—É—Ç —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ –∑–∞–ø–∏—Å–∏ ü§îü§îü§î"),
            "game_call":                self.gameCall,
            "exit_call":                self.exitCall
        }

        self.bot = bot
        self.db = db

    def checkCommand(self, event):
        print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞")
        if event.obj.payload.get('type') in self.ButtonCommands:
            self.ButtonCommands[event.obj.payload.get('type')](event)

    def loginCall(self, event):
        # –í–•–û–î
        # NOTE: –õ—É—á—à–µ —Å—Ç–æ–∏—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ MINI APPS
        self.bot.writeMsg(event.obj.user_id, "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ")
        self.db.select("Students", "user_id", f"WHERE user_id='{event.obj.user_id}'")
        res = self.db.cursor.fetchone()
        if res == None:
            self.bot.writeMsg(event.obj.user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
            self.db.insert("Students", "user_id", f"'{event.obj.user_id}'")
            self.db.insert("Pending", "user_id, act", f"'{event.obj.user_id}', 'REGISTER_NAME'")
            self.db.connection.commit()
        else:
            self.bot.sendKeyboard(event.obj.user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!", "main_sub_keyboard")

    def infoCall(self, event):
        self.db.select("Students", "user_id", f"WHERE user_id='{event.obj.user_id}'")
        res1 = self.db.cursor.fetchone()
        self.db.select("Students", "full_name", f"WHERE user_id='{event.obj.user_id}'")
        res2 = self.db.cursor.fetchone()
        self.db.select("Students", "code", f"WHERE user_id='{event.obj.user_id}'")
        res3 = self.db.cursor.fetchone()

        if res1 != None and res2 != None and res3 != None:
            text = f"""
id = {res1[0]}
–ò–º—è - {res2[0]}
–ì—Ä—É–ø–ø–∞ - {res3[0]}
"""
        print(text)
        self.bot.sendKeyboard(event.obj.user_id, text, "inforamtion_edit_keyboard")

    def infoEditCall(self, event):
        self.bot.writeMsg(event.obj.user_id, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è")
        self.db.update("Pending", "act", "'REGISTER_NAME'", f"WHERE user_id = '{event.obj.user_id}'")
        self.db.connection.commit()

    def subCall(self, event):
        self.bot.sendKeyboard(event.obj.user_id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã", "main_uns_keyboard")

    def unSubCall(self, event):
        self.bot.sendKeyboard(event.obj.user_id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã", "main_sub_keyboard")

    def gameCall(self, event):
        self.bot.writeMsg(event.obj.user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑-–∑–∞ —Å–ø–∞–≥–µ—Ç—Ç–∏ –∫–æ–¥–∞ –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, –ø–æ—ç—Ç–æ–º—É –∏–≥—Ä—ã –ø–æ–∫–∞-—á—Ç–æ –Ω–µ—Ç—É")


    def exitCall(self, event):
        self.bot.sendKeyboard(event.obj.user_id, "–£–¥–∞—á–∏! üêâ", "login_keyboard")


class Bot:
    def __init__(self, token, id):
        super().__init__()
        self.token = token
        self.id = id

        self.session = VkApi(token=token, api_version="5.124")
        self.vk = self.session.get_api()
        self.longpoll = VkBotLongPoll(self.session, group_id=id)

        self.keyboards = {
            "login_keyboard": KeyboardLogin().keyboard,
            "main_sub_keyboard": KeyboardMainNoSub().keyboard,
            "main_uns_keyboard": KeyboardMainWithSub().keyboard,

            "inforamtion_edit_keyboard": EditProfile().keyboard
        }

    def newUser(self, event):
        self.sendKeyboard(event.obj.user_id, 
"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üêâ
–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üëÄ
–î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∏–∂–µ ‚ò∫"""
        ,"login_keyboard")

    def userExit(self, event):
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.obj.user_id} –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def writeMsg(self, user_id, message):
        self.session.method('messages.send', {'user_id': user_id, 'message': message, "random_id":get_random_id()})

    def attachmentMsg(self, user_id, attachment_type, attachment_id):
        ownid = "-199323686"
        self.session.method('messages.send', {'user_id': user_id, "random_id":get_random_id(), "attachment":f"{attachment_type}{ownid}_{attachment_id}"})

    def sendKeyboard(self, from_id, text, keyboard):
        if keyboard in self.keyboards:
            self.vk.messages.send(
                        user_id=from_id,
                        random_id=get_random_id(),
                        peer_id=from_id,
                        keyboard=self.keyboards[keyboard].get_keyboard(),
                        message=text)
